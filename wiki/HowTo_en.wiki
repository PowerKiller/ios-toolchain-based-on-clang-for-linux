=iOS toolchain based on clang for linux=

<font color="blue">Cjacker <cjacker@gmail.com> 2012-11-26 </font>

Clang for linux provides a fully implementation for Objective C 2.0 includes blocks and other features gcc not supported.

Here is an tutorial of  'How to setup iOS toolchain based on clang for linux'.

Actually, the iOS toolchain under linux is as same and simple as other crosscompile toolchain for embeded devices. It should include these components:

  # *Assembler and Linker*: cctools and ld64 from opendarwin.
  # *Compiler*: here we use llvm/clang.
  # *SDK*, include headers and libraries.
  # *Utilities*: such as ldid codesign tool.

You also need a iOS device jailbreaked and with ssh installed.

By the way, the default ssh password is <font color="red"> *alpine* </font>.


==At start==
Before we start, you need a workable C/C++ compiler installed.

==Step 1 : The compiler==

If your distribution already provides  clang/llvm packagesï¼Œbe sure it is 3.1 release or above.  Lower version may also work but untested. 

If you decide to build clang/llvm from scratch, please refer to <a href="http://code.google.com/p/ios-toolchain-based-on-clang-for-linux/wiki/build_clang_en"> this link</a>.


==Step 2 : The assembler and linker==
I had ported cctools-836 and ld64-85.2.2 from opendarwin to linux. the process how to merge/patch and porting is a little bit complicated, let's just skip it.

Here the final tarbal: http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/cctools-836-for-linux.tar.gz

Download and build it:

{{{
$export CFLAGS=-fno-stack-protector
$export CXXFLAGS=-fno-stack-protector
$./configure --target=arm-apple-ios --prefix=/usr
$make
$make install
}}}

<font color="red"> *NOTE* : if you use a different prefix, you should linke all "arm-apple-ios-`*`" to /usr/bin, otherwise clang can not find proper assembler and linker.  </font>

==Step4: The iPhoneOS SDK.==

You can use the pre-generated 5.0 SDK from : http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/iPhoneOS5.0.sdk.tar.xz

Extract it to */usr/share"
{{{
$tar xvf iPhoneOS5.0.sdk.tar.xz -C /usr/share
}}}

or follow <a href="http://code.google.com/p/ios-toolchain-based-on-clang-for-linux/wiki/iphoneos_sdk_en">this link</a> to generate it by yourself


==Step5: The utilities==
===ldid, the code sign tool===
ldid is codesign tool from saurik. Here is a modified version to support Mach-O armv7 binary produced by clang/cctools. also with other changes to find 'arm-apple-ios-codesign_allocate' properly.

Download 'ldid-1.0.611.tar.bz2' from: http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/ldid-1.0.611.tar.bz2

Build and install it:
{{{	
$./configure --prefix=/usr
$make
$make install
}}}


===ios-clang/ios-clang++===
To use clang compiler to compile sourcecode for IOS, some  args need to be passed to clang, '--target arm-apple-ios' tell clang to find proper assembler and linker, '-isysroot <sdk full path>' tell clang use <sdk full path> as root directory to find libraries and headers.

Here we create two scripts to wrap it.

*ios-clang*
{{{
#!/bin/bash
export IPHONEOS_SDK="/usr/share/iPhoneOS5.0.sdk"
export IPHONEOS_DEPLOYMENT_TARGET=5.0
clang -target arm-apple-ios -isysroot $IPHONEOS_SDK $@
}}}

*ios-clang++*
{{{
#!/bin/bash
export IPHONEOS_SDK="/usr/share/iPhoneOS5.0.sdk"
export IPHONEOS_DEPLOYMENT_TARGET=5.0
clang++ -target arm-apple-ios -isysroot $IPHONEOS_SDK $@
}}}

And put them in */usr/bin*.

*NOTE*: if you use ios4.2 sdk, you need also add *-arch armv6* to ios-clang/ios-clang++. Otherwise ldid will failed.


==Step6: Build app for iOS.==
Download helloworld.tar.gz from:
http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/helloworld.tar.gz

Extract it and build/install it, you need change Makefile to set *IPHONE_IP* to your own IPHONE_IP.

{{{
$tar zxvf helloworld.tar.gz 
$cd helloworld
$make
$make dist
$make install
}}}

<font color="red">
*If ld failed with this message , please add "LDFLAGS += -ldylib1.o" to your project's Makefile. * 

A patch to fix this problem had been provided in <a href = "http://code.google.com/p/ios-toolchain-based-on-clang-for-linux/wiki/iphoneos_sdk_en"> "Build clang from scratch" </a> Section.

{{{
ld: symbol dyld_stub_binding_helper not defined (usually in crt1.o/dylib1.o/bundle1.o)
}}}

</font>

There is also a <a href="http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/UICatalog.tar.gz">  UICatalog.tar.gz </a> sample code provided.


==Step7: iOS API documents.==
Download API files from:http://devimages.apple.com/docsets/20120109/com.apple.adc.documentation.AppleiOS5_0.iOSLibrary.xar

Extract it:
{{{
xar -xf com.apple.adc.documentation.AppleiOS5_0.iOSLibrary.xar
cd com.*iOSLibrary.docset/Contents/Resources/Documents/
firefox ./index.html
}}}


==Enjoy it.==
 