=A new iOS toolchain based on LLVM/clang under linux=

Cjacker <cjacker@gmail.com> 2012-11-26

LLVM/clang for linux provides a fully implementation for Objc-2.0 includes blocks and other features gcc did not provides.

Original iOS toolchain under linux is based on llvm-gcc/odcctools, according to some example Makefile, it use clang as a preprocesser to support blocks feature and other things. 

Here is an instruction of  'How to setup a new IOS toolchain based on LLVM/clang'.

Actually, the iOS toolchain under linux is just as same and simple as other crosscompile toolchain for embeded device. It should include these components:

  # *Assembler and Linker*: cctools and ld64 from opendarwin.
  # *Compiler*: here we use llvm/clang.
  # *SDK*, include headers and libraries.
  # *Utilities*: such as 'ldid' codesign tool.

==Step 1: Prepare environment.==
A modern Linux distribution should work well, you need 'xar', 'gcc/g++' or 'llvm/clang' installed. Also you may need 'dmg2img' utility. Here I use a customized Linux dist with gcc-4.7.1.

*dmg2img* can be downloaded from: http://vu1tur.eu.org/tools/

*xar* can be downloaded from: https://code.google.com/p/xar/


==Step 2: Prepare clang/llvm.(the Compiler)==

If your distribution already provides  a clang/llvm packagesï¼Œbe sure it is 3.1 release or above.

As tested, clang 3.1 and above should works very well.

*NOTE* : If you use the unpactched clang, you may need add "LDFLAGS += -ldylib1.o" to your project Makefile. since it will links to "crt1.3.1.o" and a symbol is missing. 

If your distribution did not provides a proper version of clang/llvm, please follow below steps to build a clang and apply the linker patch for it.

http://code.google.com/p/ios-toolchain-based-on-clang-for-linux/wiki/build_clang_en

==Step3: Build and install cctools/ld64(the assembler/linker)==
The toolchain.sh from saurik provides cctools-782/ld64-85.2.1. And I made a update and port it to x86_64 arch, and also make it compiled via gcc or clang.

The process how to merge/patch and porting is a little bit complicated, let's just skip it.

Here the final tarbal provided: http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/cctools-836-for-linux.tar.gz

Just download cctools-836.tar.gz and build it.


if you want to use clang/clang++ to build it:
{{{
$export CC=clang
$export CXX=clang++
}}}
* as reported, 32bit linux had a problem to build cctools via clang, so for 32bit, please use gcc/g++ to build it*
{{{
$export CC=gcc
$export CXX=g++
}}}

and build it.*NOTE*: the prefix settings, you can change it as you like.

{{{
$export CFLAGS=-fno-stack-protector
$export CXXFLAGS=-fno-stack-protector
$./configure --target=arm-apple-ios --prefix=/usr
$make
$make install
}}}

*NOTE* : if you use a different prefix, you should linke all "arm-apple-ios-`*`" to /usr/bin, otherwise clang can not find proper assembler and linker. 

==Step4: Prepare iPhoneOS SDK.==

You can use the pre-generated 5.0 SDK from:http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/iPhoneOS5.0.sdk.tar.xz

and Extract it to */usr/share"
{{{
$tar xvf iPhoneOS5.0.sdk.tar.xz -C /usr/share
}}}

or follow below steps and generate it by yourself

http://code.google.com/p/ios-toolchain-based-on-clang-for-linux/wiki/iphoneos_sdk_en

==Step5: install ldid codesign tool==
ldid is codesign tool from saurik. 

I provide a modified version to support Mach-O armv7 binary produced by clang/cctools.
also with other changes to find 'arm-apple-ios-codesign_allocate' properly.

Download 'ldid-1.0.610-modified.tar.gz' from:http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/ldid-1.0.610-modified.tar.gz

Build and install it:
{{{	
$make
$make install
}}}

*NOTE* : if you install 'arm-apple-ios-codesign_allocate' to other place, you need add a env var.
{{{
export CODESIGN_ALLOCATE=<full path to arm-apple-ios-codesign_allocate>
}}}


==Step6: Create ios-clang/ios-clang++ scripts.==
To use clang compiler to compile sourcecode for IOS, we need add some  parameters to clang:

*--target arm-apple-ios* : tell clang the target is arm-apple-ios, it can find proper as/ld

*--isysroot $IPHONEOS_SDK* : tell clang use $IPHONEOS_SDK as root directory to find libraries and headers.

Here we create two scripts to wrap it.

*ios-clang*
{{{
#!/bin/bash
export IPHONEOS_SDK="/usr/share/iPhoneOS5.0.sdk"
export IPHONEOS_DEPLOYMENT_TARGET=5.0
clang -target arm-apple-ios -isysroot $IPHONEOS_SDK $@
}}}

*ios-clang++*
{{{
#!/bin/bash
export IPHONEOS_SDK="/usr/share/iPhoneOS5.0.sdk"
export IPHONEOS_DEPLOYMENT_TARGET=5.0
clang++ -target arm-apple-ios -isysroot $IPHONEOS_SDK $@
}}}

And put them in */usr/bin*.

*NOTE*: if you use ios4.2 sdk, you need also add *-arch armv6* to ios-clang/ios-clang++. Otherwise ldid will failed.


==Step7: JailBreak your device.==
Download proper jailbreak tools and jailbreak your device(iPhone/iTouch/iPad...).
Install openssh via cyndia and test ssh connections.

*Remember*, the default password is *alpine*.


==Step8: Test toolchain.==
===1. write a simple hello world program.===

helloworld.m
{{{
#import <Foundation/Foundation.h>

int main(int argc, const char **argv)
{
    NSLog(@"Hello World");
    return 0;
}
}}}

===2. compile it.===
{{{
$ios-clang -o helloworld helloworld.m -framework Foundation
}}}

*NOTE*, if you *did not* patch llvm-svn. -ldylib1.o should be added. if we set IPHONEOS_DEPLOYMENT_TARGET env to 4.2 and above, it will link to crt1.3.1.o and symbol 'dyld_stub_binding_helper' is missing, so we need link to dylib1.o.

===3. sign the binary.===
{{{
$ldid -S helloworld
}}}

===4. upload to your device and run it.===
Use scp to transfer helloworld binary to your device and ssh to your device to run it.

==Step9: Build a HelloWorld app for IOS.==
Download helloworld.tar.gz from:
http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/helloworld.tar.gz

Extract it and build/install it, you need change Makefile to set *IPHONE_IP* to your own IPHONE_IP.

{{{
$tar zxvf helloworld.tar.gz 
$cd helloworld
$make
$make dist
$make install
}}}

There is also a 'UICatalog.tar.gz' in the download link. You can also try it.


==Step10: iOS API documents.==
Download API files from:http://devimages.apple.com/docsets/20120109/com.apple.adc.documentation.AppleiOS5_0.iOSLibrary.xar

Extract it:
{{{
xar -xf com.apple.adc.documentation.AppleiOS5_0.iOSLibrary.xar
cd com.*iOSLibrary.docset/Contents/Resources/Documents/
firefox ./index.html
}}}


==Step11: Enjoy it.==
 