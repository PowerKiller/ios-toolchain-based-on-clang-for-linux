=iOS toolchain based on clang for linux=

<font color="blue">Cjacker <cjacker@gmail.com> 2012-11-26 </font>

Clang for linux provides an almost full implementation for Objective C 2.0 includes blocks and other features gcc doesn't support.

New version of xcode also use clang as its compiler:

http://opensource.apple.com/release/developer-tools-45/

This URL shows the opensource components used in Xcode 4.5, I almost ported everything and we got a Non-UI copy of Xcode toolchain for linux now.

Here is an tutorial of  'How to setup iOS toolchain for linux'. 

All these components shoule be easily port to Windows with cygwin except re-write some platform related functions. waiting for volunteers.

Actually, the iOS toolchain under linux is as same and simple as other crosscompile toolchain for embeded devices. It should include these components:

  # *Assembler and Linker*: cctools and ld64 from apple opensource.
  # *Compiler*:  Clang/LLVM
  # *Debugger*: gdb/dsymutil. (waiting for lldb)
  # *SDK*, include headers and libraries.
  # *Utilities*: such as ldid codesign tool.
  # *Documents*: API reference and related documents.

You also need an iOS device jailbreaked and with ssh installed.

By the way, the default ssh password is <font color="red"> *alpine* </font>.

Before we start, you need a workable C/C++ compiler installed.



==<font color="blue"> Step 1 : The compiler </font>==

Clang/llvm 3.3 svn is *strongly* recommended.

Please refer to <a href="http://code.google.com/p/ios-toolchain-based-on-clang-for-linux/wiki/build_clang_en"> this link</a> to build a svn version for your linux distribution.

If your distribution already provides  clang/llvm packagesï¼Œmake sure it is 3.1 release or above.  Lower version may work but isn't tested. 


==<font color="blue"> Step 2 : The assembler and linker </font>==
I had ported the latest cctools-836 and ld64-134.9 from Apple opensource to linux. the porting process is a little bit complicated, also with a lot of codes modified for linux, let's just skip it.

The porting tool and patches had been commit to SVN, if you are interested in how to porting, please check out the codes from:
{{{
svn checkout http://ios-toolchain-based-on-clang-for-linux.googlecode.com/svn/trunk/cctools-porting
}}}

Here is a released tarball.
http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/cctools-836-ld64-134.9-for-linux-1.0.tar.xz

Download and build it:
{{{
$export CC=clang
$export CXX=clang++
$CXXFLAGS=" -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS"  ./configure --target=arm-apple-darwin11 --prefix=/usr
$make
$make install
}}}

<font color="red"> 
  # clang/clang++ are needed, since ld64-134.9 require blocks extension.
  # There is a function prototype in unistd.h from glibc use a variable name "`__`block", it is a reserved word of clang, please change it to anything your want, for example "`__`libc`_`block". this should be fixed in glibc.
{{{
extern void encrypt (char *__block, int __edflag) __THROW __nonnull ((1));
}}}
  # CXXFLAGS is needed for some situation, it already fixed in SVN and will shipped with next release.
</font>

==<font color="blue"> Step 3: The iPhoneOS SDK. </font>==
<font color="red">I can not redistribute the  iPhoneOS SDK shipped with xcode, Please follow below steps to generate it yourself. </font>

If you want to do this totally under linux, you may need these tools installed.

*dmg2img* can be downloaded from: http://vu1tur.eu.org/tools/

*xar* can be downloaded from: https://code.google.com/p/xar/

The following is for 5.0 sdk from "xcode_4.2_and_ios_5_sdk_for_snow_leopard.dmg" , which is almost same with 4.x/6.x sdk and other version of xcode.

===3.1. Extract iPhoneSDK pkg from xcode-xxx.img===
Download the xcode-xxx.dmg with iOS sdk from Apple.

Under Mac OSX, click the xcode img will mount it automaticallly, usually it is mounted under */Volumes/Xcode/*, enter /Volumes/Xcode/Packages and find *iPhoneSDK5_0.pkg*  for ios 5 or other versions according to your iOS version.

Under Linux, you will need dmg2img to manipulate the Xcode img:

1, Get the partition
{{{
$dmg2img -p xcode_4.2_and_ios_5_sdk_for_snow_leopard.dmg
}}}

You will get
{{{

dmg2img v1.6.4 (c) vu1tur (to@vu1tur.eu.org)

xcode_4.2_and_ios_5_sdk_for_snow_leopard.dmg --> (partition list)

partition 0: Driver Descriptor Map (DDM : 0)
partition 1:  (Apple_Free : 1)
partition 2: Apple (Apple_partition_map : 2)
partition 3: Macintosh (Apple_Driver_ATAPI : 3)
partition 4:  (Apple_Free : 4)
partition 5: disk image (Apple_HFS : 5)
partition 6:  (Apple_Free : 6)
}}}

Find the line contains "Apple HFS", it is partition 5 for this dmg, and run below command to convert it to loopback img.

{{{
$dmg2img -p 5 xcode_4.2_and_ios_5_sdk_for_snow_leopard.dmg
}}}

After it finished, you will get a img named "xcode_4.2_and_ios_5_sdk_for_snow_leopard.img".

Mount it:
{{{
$sudo modprobe hfsplus
$sudo mount -o loop -t hfsplus xcode_4.2_and_ios_5_sdk_for_snow_leopard.img /mnt
$cd /mnt/Packages.
}}}

You will find a lot of ".pkg" files in this dir, we need:

*iPhoneSDK5_0.pkg* : this is iOS SDK.

*iPhoneSDKTools.pkg* : this pkg contains libarc_iphoneos.a, it is needed by clang with "-fobjc-arc" flag to enable ARC support of Objective-C.


===3.2. Extract files  for iPhoneOS SDK===
For SDK,
{{{
$cd /usr/share
$xar -xf iPhoneSDK5_0.pkg Payload; cat Payload | zcat | cpio -id
$mv Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.0.sdk .
$rm -rf Platforms
$rm -rf Payload
}}}

For ARC support
{{{
$xar -xf iPhoneSDKTools.pkg Payload
$cat Payload |zcat|cpio -id
$mkdir -p /usr/share/iPhoneOS5.0.sdk/usr/lib/arc
$cp Platforms/iPhoneOS.platform/Developer/usr/lib/arc/libarclite_iphoneos.a /usr/share/iPhoneOS5.0.sdk/usr/lib/arc
}}}


===3.3. fix framework headers positions(optional)===
Headers of frameworks can be found automatically by clang, so this step is optional.
If you need code completion in your editor(such as clang code completion for vim/emacs or something else), you may need fix headers positions. and copy all framework headers to standard include dir of SDK.
{{{
# fix headers locations, optional.
cd iPhoneOS5.0.sdk/System/Library/Frameworks
for i in *.framework
do
     f=`basename $i .framework`
     mkdir -p /usr/share/iPhoneOS5.0.sdk/usr/include/$f
     if [ -d $i/Headers ]; then
     cp -Rf -p $i/Headers/* /usr/share/iPhoneOS5.0.sdk/usr/include/$f/
     fi
done
}}}


==<font color="blue"> Step 4: The utilities </font>==
iphonesdk-utils is a utility collection for iOS development, provides below utilities:

*NOTE:*
(Some of them are collected from internet with some modifications.)

  # *ldid* : codesign tool, with armv7/armv7s support and other changes from orig version. it will be called by ld64.
  # *ios-clang-wrapper* : automatically find SDK and construct proper compilation args.
  # *ios-pngcrush*: png crush/de-crush tool, like Apple's pngcrush.
  # *ios-createProject* : project templates
  # *ios-genLocalization* : iOS app localization tool based on clang lexer.
  # *ios-plutil* : plist compiler/decompiler.
  # *ios-xcbuild* : convert xcode project to makefile, build xcode project directly under linux.

Download from: 

http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/iphonesdk-utils-1.4.tar.bz2

Build and install it:
{{{	
$./configure --prefix=/usr
$make
$make install
}}}

==<font color="blue"> Step 6: Debugger </font>==
I had ported gdb-1822 from opendarwin to linux. thanks to opencflite(for CoreFoundation implementation) and maloader(for running mac binary under linux).

A package include opencflite/maloader/gdb-1822 had been provided to make it build and install easily.

Download from:

http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/gdb-1822-for-linux.tar.xz

and build/install it:
{{{
$make
$make install
}}}
It will install arm-apple-darwin11-gdb/dsymutil to "/usr/bin" and some libraries to "/usr/lib"

You can refer to <a href="http://code.google.com/p/ios-toolchain-based-on-clang-for-linux/wiki/Howto_debug_en">this link</a> to start debug your App for iOS.

By the way, I also tried lldb and enable remote-ios support under linux. It seems connected and works but there is too much difference between gdb and lldb, I need more time to test it.
 
==<font color="blue"> Step 6: API reference. (Optional) </font>==
Download API reference from:

http://devimages.apple.com/docsets/20120109/com.apple.adc.documentation.AppleiOS5_0.iOSLibrary.xar

Extract it:
{{{
xar -xf com.apple.adc.documentation.AppleiOS5_0.iOSLibrary.xar
cd com.*iOSLibrary.docset/Contents/Resources/Documents/
firefox ./index.html
}}}


==<font color="blue"> Step 7: Emacs codes auto complete. (Optional) </font>==
I modified emacs-auto-complete-clang-async to run clang-complete only one instance and have a significant performance improvement.(The patch had been submitted to original author)

here is a tarball include auto-complete/yasnippet/autopair.el/auto-complete-clang-async to provide a convenient development environment with Emacs.
 
Download :

http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/emacs-auto-complete.tar.gz

Please refer to "README" in tarball to setup by yourself.

==<font color="blue"> Step 8: VIM codes auto complete. (Optional) </font>==
If you are a vim user, you can use clang_complete plugin for vim to get code completion support. make sure your vim/gvim already enable python support.

Download it from:
https://github.com/Rip-Rip/clang_complete

extract all files to your ~/.vim dir.

then create a App Project. and add these lines to `<`Project folder`>`/.clang_complete
{{{
-ccc-host-triple arm-apple-darwin11
-I/usr/share/iPhoneOS5.0.sdk/usr/include
}}}

when you want to get the code completion hint, you can type "Ctrl-x Ctrl-u" to get a popup menu.

You may also need autopair/snipMate plugin for VIM.

==<font color="blue"> Test toolchain </font>==
I tested this toolchain with many opensource iOS projects, you can use RestKit, json-framework, fmdb or sample codes directly from API reference.

(NOTE, A lot of sampel code in API Reference from Apple use xib and storyboard, these files can not be converted to binary format, so it may be built but can not run directly in iOS device.)

Here provides an example of RestKit:

Download RestKit from:
https://github.com/RestKit/RestKit

Prepare a iOS 6.x sdk, since the latest RestKit need some API only in iOS 6.x.

You may need to modify ~/.iphonesdk to 
{{{
SDK_FULL_PATH=/usr/share/iPhoneOS6.0.sdk
SDK_VERSION=6.0
}}}

then enter RestKit dir
{{{
$ios-xcbuild RestKit.xcodeproj
$make
}}}

or directly build it
{{{
$ios-xcbuild -b RestKit.xcodeproj
}}}

You will get the final result (headers and librestkit.a) in "./xcbuild" directory.


==<font color="blue"> Build an iOS App. </font>==
====1. Create project ====
Run ios-createProject
{{{
$ios-createProject
}}}

You will get below messages:
{{{
iPhone Project Createor
---------------------------
[0.] Application
[1.] Command line utility
[2.] Dynamic Framework
[3.] Dynamic Library
[4.] Notification Center widget
[5.] Static Framework
[6.] Static Library
[7.] Example Player
[8.] Example UICatalog
Choose a Template:
}}}

Input 0 and the Project name "HelloWorld" to create a helloworld App.


====2. Build & install App====
{{{
$cd HelloWorld
$make
$make install IPHONE_IP=<your own device IP>
}}}

If you want to build a multi-arch FAT mach-o binary, add multiple "-arch armv(n)" to CFLAGS/CXXFLAGS in Makefile. armv(n) means armv6/armv7/armv7s.

For iOS 4.x/5.x, armv6 armv7 can be used.  
For iOS 6.x, armv7/armv7s can be used. (armv6 droped in iOS 6.x)

====3. Localize App ====
Run ios-genLocalization in Project folder.
{{{
$ios-genLocalization
}}}

{{{
Localization tool for iOs App

Languages
[ 0.] English   (English)
[ 1.] zh_CN     (Simp. Chinese)
[ 2.] zh_TW     (Trad. Chinese)
[ 3.] ko        (Korean)
[ 4.] Japanese  (Japanese)
[ 5.] German    (German)
[ 6.] French    (French)
[ 7.] Italian   (Italian)
[ 8.] Spanish   (Spanish)
Enter your number : 
}}}

Please choose which language your App want to support, it will generate the related plist files. translate them and re-install your App to iOS device.



==Enjoy it.==
 