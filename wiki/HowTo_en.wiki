=iOS toolchain based on clang for linux=

<font color="blue">Cjacker <cjacker@gmail.com> 2012-11-26 </font>

Clang for linux provides almost fully implementation for Objective C 2.0 includes blocks and other features gcc not supported.

Here is an tutorial of  'How to setup iOS toolchain based on clang for linux'.

Actually, the iOS toolchain under linux is as same and simple as other crosscompile toolchain for embeded devices. It should include these components:

  # *Assembler and Linker*: cctools and ld64 from opendarwin.
  # *Compiler*: here we use llvm/clang.
  # *SDK*, include headers and libraries.
  # *Utilities*: such as ldid codesign tool.

You also need a iOS device jailbreaked and with ssh installed.

By the way, the default ssh password is <font color="red"> *alpine* </font>.

Before we start, you need a workable C/C++ compiler installed.



==Step 1 : The compiler==

Clang/llvm 3.3 svn is recommended.(Since notification center widget of iOS 5 need clang 3.3 svn to compile and run)

If your distribution already provides  clang/llvm packagesï¼Œbe sure it is 3.1 release or above.  Lower version may also work but not tested. 

If you decide to build clang/llvm from scratch, please refer to <a href="http://code.google.com/p/ios-toolchain-based-on-clang-for-linux/wiki/build_clang_en"> this link</a>.


==Step 2 : The assembler and linker==
I had ported cctools-836 and ld64-85.2.2 from opendarwin to linux. the process how to merge/patch and porting is a little bit complicated, let's just skip it.

Here the final tarbal: http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/cctools-836.2-for-linux.tar.gz

Download and build it:

{{{
$export CFLAGS=-fno-stack-protector
$export CXXFLAGS=-fno-stack-protector
$./configure --target=arm-apple-darwin9 --prefix=/usr
$make
$make install
}}}

<font color="red"> *NOTE* : if you use a different prefix, you should linke all "arm-apple-darwin9-`*`" to /usr/bin, otherwise clang can not find proper assembler and linker.  </font>

==Step 3: The iPhoneOS SDK.==

You can use the pre-generated 5.0 SDK from : http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/iPhoneOS5.0.sdk.tar.xz

Extract it to */usr/share"
{{{
$tar xvf iPhoneOS5.0.sdk.tar.xz -C /usr/share
}}}

or follow <a href="http://code.google.com/p/ios-toolchain-based-on-clang-for-linux/wiki/iphoneos_sdk_en">this link</a> to generate it by yourself


==Step 4: The utilities==
===ldid, the code sign tool===
ldid is 