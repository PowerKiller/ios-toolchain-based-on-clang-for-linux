=iOS toolchain based on clang for linux=

<font color="blue">Cjacker <cjacker@gmail.com> 2012-11-26 </font>

Clang for linux provides an almost full implementation for Objective C 2.0 includes blocks and other features gcc doesn't support.

Here is an tutorial of  'How to setup iOS toolchain based on clang for linux'.

Actually, the iOS toolchain under linux is as same and simple as other crosscompile toolchain for embeded devices. It should include these components:

  # *Assembler and Linker*: cctools and ld64 from opendarwin.
  # *Compiler*: here we use llvm/clang.
  # *Debugger*: Pending, waiting lldb for linux :-)
  # *SDK*, include headers and libraries.
  # *Utilities*: such as ldid codesign tool.
  # *Documents*: API reference and related documents.

You also need an iOS device jailbreaked and with ssh installed.

By the way, the default ssh password is <font color="red"> *alpine* </font>.

Before we start, you need a workable C/C++ compiler installed.



==<font color="blue"> Step 1 : The compiler </font>==

Clang/llvm 3.3 svn is *strongly* recommended.

Please refer to <a href="http://code.google.com/p/ios-toolchain-based-on-clang-for-linux/wiki/build_clang_en"> this link</a> and build a svn version for your linux distribution.

If your distribution already provides  clang/llvm packagesï¼Œmake sure it is 3.1 release or above.  Lower version may also work but is not tested. 


==<font color="blue"> Step 2 : The assembler and linker </font>==
I had ported cctools-836 and ld64-134.9 from opendarwin to linux. the porting process is a little bit complicated, also with a lot of codes modified for linux, let's just skip it.

http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/cctools-836.22-ld64-134.9-for-linux.tar.gz

Download and build it (<font color="red"> NEED clang/clang++ to compile. </font>)

{{{
$./configure --target=arm-apple-darwin11 --prefix=/usr
$make
$make install
}}}


==<font color="blue"> Step 3: The iPhoneOS SDK. </font>==

You can use the pre-generated SDKs (with Arc support, header positions fixed).

for iOS 4.x: http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/iPhoneOS4.2.sdk.tar.xz

for iOS 5.x: http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/iPhoneOS5.0.sdk.tar.xz

for iOS 6.x: http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/iPhoneOS6.0.sdk.tar.xz

Extract it to */usr/share"
{{{
$tar xvf iPhoneOS*.sdk.tar.xz -C /usr/share
}}}

or follow <a href="http://code.google.com/p/ios-toolchain-based-on-clang-for-linux/wiki/iphoneos_sdk_en">this link</a> to generate it by yourself.


==<font color="blue"> Step 4: The utilities </font>==
iPhoneSDK-utils provides below utilities:

*NOTE:*

(Some of them is collected from internet. with some modifications.)

  # *ldid* : codesign tool, with armv7/armv7s support and other changes from orig version.
  # *ios-clang-wrapper* : automatically find SDK and construct proper compilation args.
  # *proj2make* : convert xcodeproj to proper Makefiles.
  # *ios-pngrevert* : fix png files optimized by iOS.
  # *ios-pngcrush*: pincrush, like Apple's pngcrush.
  # *ios-createProject* : project templates
  # *ios-genLocalization* : iOS app localization tool based on clang lexer.
  # *ios-plutil* : plist compiler/decompiler.

Download from: 

http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/iphonesdk-utils-1.1.tar.bz2


Build and install it:
{{{	
$./configure --prefix=/usr
$make
$make install
}}}

==<font color="blue"> Step 5: API reference. (Optional) </font>==
Download API reference from:

http://devimages.apple.com/docsets/20120109/com.apple.adc.documentation.AppleiOS5_0.iOSLibrary.xar

Extract it:
{{{
xar -xf com.apple.adc.documentation.AppleiOS5_0.iOSLibrary.xar
cd com.*iOSLibrary.docset/Contents/Resources/Documents/
firefox ./index.html
}}}


==<font color="blue"> Build an iOS App. </font>==
====1. Create project ====
Run ios-createProject
{{{
$ios-createProject
}}}

You will get below messages:
{{{
iPhone Project Createor
---------------------------
[0.] Application
[1.] Command line utility
[2.] Notification Center widget
[3.] Example Player
[4.] Example UICatalog
Choose a Template:
}}}

Input 0 and the Project name "HelloWorld" to create a helloworld App.


====2. Build & install App====
{{{
$cd HelloWorld
$make
$make install IPHONE_IP=<your own device IP>
}}}

If you want to build a multi-arch FAT mach-o binary, add multiple "-arch armv<n>" to CFLAGS/CXXFLAGS in Makefile. armv<n> means armv6/armv7/armv7s.

For iOS 4.x/5.x, armv6 armv7 can be used.  
For iOS 6.x, armv7/armv7s can be used. (armv6 droped in iOS 6.x)

====3. Localize App ====
Run ios-genLocalization in Project folder.
{{{
$ios-genLocalization
}}}

{{{
Localization tool for iOs App

Languages
[ 0.] English   (English)
[ 1.] zh_CN     (Simp. Chinese)
[ 2.] zh_TW     (Trad. Chinese)
[ 3.] ko        (Korean)
[ 4.] Japanese  (Japanese)
[ 5.] German    (German)
[ 6.] French    (French)
[ 7.] Italian   (Italian)
[ 8.] Spanish   (Spanish)
Enter your number : 
}}}

Please choose which language your App want to support, it will generate the related plist files. translate them and re-install your App to iOS device.



==Enjoy it.==
 