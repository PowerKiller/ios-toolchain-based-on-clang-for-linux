=iOS toolchain based on clang for linux=

<font color="blue">Cjacker <cjacker@gmail.com> 2012-11-26 </font>

Clang for linux provides an almost full implementation for Objective C 2.0 includes blocks and other features gcc doesn't supported.

Here is an tutorial of  'How to setup iOS toolchain based on clang for linux'.

Actually, the iOS toolchain under linux is as same and simple as other crosscompile toolchain for embeded devices. It should include these components:

  # *Assembler and Linker*: cctools and ld64 from opendarwin.
  # *Compiler*: here we use llvm/clang.
  # *SDK*, include headers and libraries.
  # *Utilities*: such as ldid codesign tool.

You also need an iOS device jailbreaked and with ssh installed.

By the way, the default ssh password is <font color="red"> *alpine* </font>.

Before we start, you need a workable C/C++ compiler installed.



==Step 1 : The compiler==

Clang/llvm 3.3 svn is *strongly* recommended.

Please refer to <a href="http://code.google.com/p/ios-toolchain-based-on-clang-for-linux/wiki/build_clang_en"> this link</a> and build a svn version for your linux distribution.

If your distribution already provides  clang/llvm packagesï¼Œbe sure it is 3.1 release or above.  Lower version may also work but not tested. 


==Step 2 : The assembler and linker==
I had ported cctools-836 and ld64-128.2 from opendarwin to linux. the porting process is a little bit complicated, let's just skip it.

Here the final tarbal:

http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/cctools-836.10-ld64-128.2-for-linux.tar.gz

Download and build it: 

LDFLAGS ported to the path contains libLTO.so, change it according to your clang/llvm configurations.

<font color="red">*NOTE*
  # be sure clang/llvm installed and works. clang will be used as a compiler.

  # be sure libobjc2 installed from http://download.gna.org/gnustep/libobjc2-1.6.1.tar.bz2.
</font>



{{{
$export CC=clang
$export CXX=clang++
$export CFLAGS=-fno-stack-protector
$export CXXFLAGS=-fno-stack-protector
$LDFLAGS+=/usr/lib/llvm ./configure --target=arm-apple-darwin11 --prefix=/usr
$make
$make install
}}}

<font color="red"> If you use a different prefix, you should linke all "arm-apple-darwin11-`*`" to /usr/bin, otherwise clang can not find proper assembler and linker.  

Since there is no file conflicts with system files, /usr as a prefix should be your first choice.
</font>

==Step 3: The iPhoneOS SDK.==

You can use the pre-generated 6.0 SDK from : http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/iPhoneOS6.0.sdk.tar.xz

Extract it to */usr/share"
{{{
$tar xvf iPhoneOS6.0.sdk.tar.xz -C /usr/share
}}}

or follow <a href="http://code.google.com/p/ios-toolchain-based-on-clang-for-linux/wiki/iphoneos_sdk_en">this link</a> to generate it by yourself

App compiles with iOS 6.0 sdk should be runnable under 4.x,5.x if you did not use iOS6 new API and frameworks.

==Step 4: The utilities==
===ldid, the code sign tool===
ldid is codesign tool from saurik. Here is a modified version with some changes to find 'arm-apple-darwin11-codesign_allocate' properly, also add autoconf/automake support.

Download from: http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/ldid-1.0.614.tar.bz2

Build and install it:
{{{	
$./configure --prefix=/usr
$make
$make install
}}}

===iPhoneSDK-utils===
====clang wrapper====
To use clang compiler to compile sourcecode for IOS, some  args need to be passed to clang, '--target arm-apple-darwin11' tell clang to find proper assembler and linker, '-isysroot <sdk full path>' tell clang use <sdk full path> as root directory to find libraries and headers.

Here provides a wrapper program to check your environment automatically, if it can not find  iPhone SDK, it will prompt you enter the full SDK path.

http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/iPhoneSDK-utils-0.4.tar.gz

{{{
$configure --prefix=/usr
$make
$make install
}}}

After installation finished ,you will get "ios-clang"/"ios-clang++", this is the compiler wrapper you should use will above toolchain.

When you first invoke ios-clang/ios-clang++, you will be prompted to input your iPhoneOS SDK absolute path if it can not be found automatically.

====ios-createProject====
This is a convinent tool provided by iPhoneSDK-utils to help users to create App quickly.

After iPhoneSDK-utils installed, try:

{{{
$ios-createProject
}}}

You will get messages like this:
{{{
iPhone Project Createor
---------------------------
[0.] Application
[1.] Command line utility
[2.] Notification Center widget
[3.] Example Player
[4.] Example UICatalog
Choose a Template:
}}}

====ios-genLocalization====
This is another tool provided by iPhoneSDK-utils to make iOS App localized easily.
Run it in your project folder, note you need supply an argument: "app" for normal Application, "wee" for Notification Center Widget.
{{{
$ios-genLocalization
}}}

You will get messages like this:
{{{
Localization tools for iPhone App

Languages
0 . English (English)
1 . zh_CN (Simp. Chinese)
2 . zh_TW (Trad. Chinese)
3 . ko (Korean)
4 . Japanese (Japanese)
5 . German (German)
6 . French (French)
7 . Italian (Italian)
8 . Spanish (Spanish)
Please choose one language:
}}}

===proj2make, the xcode project converter ===
proj2make is a xcode project converter I modified a lot from pbtomake, it can convert ios xcode project to the proper Makefile that we need. Acctually, I use it to generate the first makefile of ld64/cctools for linux:-)

http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/proj2make-4.3.tar.gz

{{{
$tar zxvf proj2make-4.3.tar.gz
$cd proj2make-4.3
$make
$install -m 0755 proj2make /usr/bin
}}}

If you want to convert a xcode project, enter the folder of that project, and run
{{{
$proj2make -i *.xcodeproj
$make
}}}

*NOTE* : It does not handle/compile .xib file or storyboard files.


==Build app for iOS.==
run ios-createProject
{{{
$ios-createProject
}}}

then input 0 and the Project name "HelloWorld" to create a helloworld App, enter HelloWorld folder

run:
{{{
$make
$make install IPHONE_IP=<your own device IP>
}}}

<font color="red">
*If the compilatoin failed with this message , please add <font color="blue">LDFLAGS += -ldylib1.o</font> to your project's Makefile. * </font>

A patch to fix this problem had been provided in <a href = "http://code.google.com/p/ios-toolchain-based-on-clang-for-linux/wiki/build_clang_en"> "Build clang from scratch" </a> Section.

{{{
ld: symbol dyld_stub_binding_helper not defined (usually in crt1.o/dylib1.o/bundle1.o)
}}}


==the iOS API documents.(Optional)==
Download API files from:http://devimages.apple.com/docsets/20120109/com.apple.adc.documentation.AppleiOS5_0.iOSLibrary.xar

Extract it:
{{{
xar -xf com.apple.adc.documentation.AppleiOS5_0.iOSLibrary.xar
cd com.*iOSLibrary.docset/Contents/Resources/Documents/
firefox ./index.html
}}}


==Enjoy it.==
 