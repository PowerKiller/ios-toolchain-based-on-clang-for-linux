=Linux系统基于clang的ios toolchain=

<font color="blue">Cjacker <cjacker@gmail.com> 2012-11-26 </font>

Clang提供了较完整的Objective C 2.0支持，包括了blocks等gcc不支持的高级特性。

这里提供了一个完整的说明，一步一步的在Linux系统上构建一个基于clang的iOS工具链和开发环境。

实际上，iOS工具链跟其他的跨平台编译工具链一样，主要包含以下组件：

  # *汇编器和链接器*: 这里我们使用来自opendarwin的较新版本的cctools和ld64.
  # *编译器*: 这里我们使用clang
  # *SDK*. 提供了开发库和头文件
  # *辅助工具*: 比如ldid签名工具

除此之外，你还需要一个已经越狱的iOS设备，并安装好ssh。

顺便说一下，默认的ssh密码是 <font color="red"> *alpine* </font>.

在开始之前，你需要有一个可以工作的编译环境，gcc或者clang都是可以的。



==Step 1 : 编译器==

推荐的版本是clang/llvm 3.3 svn版本。(因为iOS 5的通知中心插件需要clang 3.3svn版本才可以正常工作)

如果你的发行版已经提供了clang/llvm软件包，只要确定是3.1或者更新的版本，应该都是可以正常工作的，低版本的clang可能可以工作，但没有经过测试。

如果你决定自己构建一个clang编译器，请参考  <a href="http://code.google.com/p/ios-toolchain-based-on-clang-for-linux/wiki/build_clang_zh">这个链接</a>。


==Step 2 : 汇编器和链接器==

我已经移植了OpenDarwin的cctools-836和ld64-128.2到Linux系统，移植的过程比较复杂，这里就不详细讲了。

可以从这里下载到移植后的代码压缩包 :

http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/cctools-836.12-ld64-128.2-for-linux.tar.gz


编译安装(需要使用clang/clang++编译)：
LDFLAGS 指向libLTO.so所在的路径，根据自己系统的情况调整即可，如果是标准Clang/LLVM的安装，应该不需要设置，默认就在/usr/lib目录。

{{{
$LDFLAGS+=/usr/lib/llvm ./configure --target=arm-apple-darwin11 --prefix=/usr
$make
$make install
}}}

==Step 3: iPhoneOS SDK.==
你可以直接下载一个已经准备好的SDK环境(包含ARC支持和头文件位置的调整)

iOS 4.x: http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/iPhoneOS4.2.sdk.tar.xz

iOS 5.x: http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/iPhoneOS5.0.sdk.tar.xz

iOS 6.x: http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/iPhoneOS6.0.sdk.tar.xz

解压到 */usr/share"
{{{
$tar xvf iPhoneOS*.sdk.tar.xz -C /usr/share
}}}

或者按照 <a href="http://code.google.com/p/ios-toolchain-based-on-clang-for-linux/wiki/iphoneos_sdk_zh">这个链接的说明</a> 来自己生成一个SDK环境。


==Step 4: 辅助工具==
iPhoneSDK-utils 提供了以下工具：

  # *ldid* : 签名工具，已做修改，支持armv7/v7s。
  # *ios-clang-wrapper* : sdk环境和clang参数的自动判别的wrapper，提供编译命令ios-clang/ios-clang++
  # *proj2make* : 转换xcodeproj工程到makefile.
  # *ios-fixpng* : 修复iOS的png文件
  # *ios-pngcrush*: 来自pincrush，优化png文件。
  # *ios-createProject* : 工程模板
  # *ios-genLocalization* : 基于clang词法分析的国际化工具。
  # *ios-plutil* : plist 编译器/反编译器。

http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/iPhoneSDK-utils-0.9.tar.gz

编译安装：
{{{	
$./configure --prefix=/usr
$make
$make install
}}}

==为iOS编译一个简单的应用==

从这里下载HelloWorld.app的代码：

http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/helloworld.tar.gz

解压编译、安装，然后到越狱设备上看看安装后的结果。

{{{
$tar zxvf helloworld.tar.gz 
$cd helloworld
$make
$make dist
$make install IPHONE_IP=<你的越狱设备IP>
}}}

安装时会提示你输入越狱设备的密码，你可以通过预储存ssh密码的方式避免每次都要输入。

<font color="red">
*如果出现如下的错误提示，说明你使用的是一个未打补丁的clang，请在Makefile中加入LDFLAGS += -ldylib1.o</font>

这里提供了一个补丁，参考<a href = "http://code.google.com/p/ios-toolchain-based-on-clang-for-linux/wiki/iphoneos_sdk_zh"> "如何自己构建clang" </a>。

{{{
ld: symbol dyld_stub_binding_helper not defined (usually in crt1.o/dylib1.o/bundle1.o)
}}}



还有一个常见的 <a href="http://ios-toolchain-based-on-clang-for-linux.googlecode.com/files/UICatalog.tar.gz">UICatalog.tar.gz</a>示例代码，也可以尝试一下。

==iOS API 文档(可选)==
http://devimages.apple.com/docsets/20120109/com.apple.adc.documentation.AppleiOS5_0.iOSLibrary.xar

解压:
{{{
xar -xf com.apple.adc.documentation.AppleiOS5_0.iOSLibrary.xar
cd com.*iOSLibrary.docset/Contents/Resources/Documents/
firefox ./index.html
}}}

==Enjoy it.==
 